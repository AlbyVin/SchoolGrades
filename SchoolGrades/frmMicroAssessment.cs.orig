using SchoolGrades.DbClasses;
using System;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

namespace SchoolGrades
{
    public partial class frmMicroAssessment : Form
    {
        private string currentYear;

        private int idQuestionParent;
        private string idGradeType;
        private string idGradeTypeParent;
        private Class currentClass;

        frmMain callingForm; 

        Student currentStudent;
        Grade currentMacroGrade;
        GradeType currentGradeType;
        SchoolSubject currentSchoolSubject;

        Question currentQuestion = new Question();
        internal Question CurrentQuestion { get => currentQuestion; set => currentQuestion = value; }

        Question oldQuestion = null;
        Grade currentGrade = new Grade();
        internal Grade CurrentGrade { get => currentGrade; set => currentGrade = value; }

        DbLayer db = new DbLayer(DbLayer.DbType.SqLite);

        internal frmMicroAssessment(frmMain CallingForm, Class Class, Student Student,  
            GradeType GradeType, SchoolSubject Subject, Question Question)
        {
            InitializeComponent();

            callingForm = CallingForm; 
            currentClass = Class; 
            currentStudent = Student;
            currentGradeType = GradeType;
            currentSchoolSubject = Subject;
            currentQuestion = Question;
        }

        public frmMicroAssessment(int IdGrade)
        {
            InitializeComponent();

            // constructor for subgrades for a grade passed trough its id
            currentGrade.IdGrade = IdGrade;
            currentStudent = new Student();
            db.GetGradeAndStudent(currentGrade, currentStudent);
            currentYear = currentGrade.IdSchoolYear;
            currentClass = db.GetClassOfStudent(Commons.IdSchool, currentYear, currentStudent);
            
            currentGradeType = db.GetGradeType(currentGrade.IdGradeType);

            currentSchoolSubject = db.GetSchoolSubject(currentGrade.IdSchoolSubject);
            currentQuestion = db.GetQuestionById(currentGrade.IdQuestion);
        }

        private void frmMicroAssessment_Load(object sender, EventArgs e)
        {
            if (currentStudent is null)
            {
                MessageBox.Show("Selezionare un allievo");
                this.Close();
            }

            //if (currentGradeType != null)
            txtGradeType.Text = currentGradeType.Name;

            //currentMacroGrade = db.GetGrade(currentGradeType.IdGradeTypeParent);
            currentYear = currentClass.SchoolYear;
            txtSchoolSubject.Text = currentSchoolSubject.IdSchoolSubject;
            currentMacroGrade = null;
            if (currentGradeType.IdGradeTypeParent != null && currentGradeType.IdGradeTypeParent != "")
            {
                // find the last macro grade of this student 
                currentMacroGrade = db.LastGradeOfStudent(currentStudent, currentYear
                    , currentSchoolSubject, currentGradeType.IdGradeTypeParent);
                // get grade type information of that last macro grade
                GradeType gt = db.GetGradeType(currentMacroGrade.IdGradeType);
                if (gt != null)
                {
                    txtGradeTypeParent.Text = gt.Name;
                    txtIdMacroGrade.Text = currentMacroGrade.IdGrade.ToString();
                }
                else
                {
                    txtIdMacroGrade.BackColor = Color.Red;
                }
            }
            else
            {
                txtGradeTypeParent.Text = "----";
                txtIdMacroGrade.Text = "----";
            }

            idGradeType = currentGradeType.IdGradeType;

            TxtIdStudent.Text = currentStudent.IdStudent.ToString();
            ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);

            if (currentQuestion != null)
            {
                RefreshTextBoxes(); 
            }

            try
            {
                picStudent.Image = System.Drawing.Image.FromFile(Commons.PathImages + "\\" +
                db.GetFilePhoto(currentStudent.IdStudent, currentYear));
            }
            catch
            {
            }

            this.BackColor = Commons.ColorFromNumber(currentSchoolSubject);
            LessonTimer.Interval = 1000; 
            if (Commons.IsTimerLessonActive)
                LessonTimer.Start();
        }

        private void ShowStudentDataAndAverages(Student Student, string Year, string IdGradeType)
        {
            currentStudent = Student;
            this.currentYear = Year;
            // student's label
            lblStudent.Text = currentStudent.ToString();

            DataTable T = db.GetMacroGradesOfStudentOpen(currentStudent.IdStudent, currentYear, IdGradeType,
                currentSchoolSubject.IdSchoolSubject);
            // weighted sum
            DgwQuestions.DataSource = T;
            double weightedSum = 0;
            double sumOfWeights = 0;
            foreach (DataRow riga in T.Rows)
            {
                weightedSum += (double)riga["value"] * (double)riga["weight"];
                sumOfWeights += (double)riga["weight"];
            }
            txtWeightsSum.Text = sumOfWeights.ToString("#.#");
            if (sumOfWeights >= 95)
                txtWeightsSum.BackColor = Color.Lime;
            else if (sumOfWeights > 45)
                txtWeightsSum.BackColor = Color.Orange;
            else if(sumOfWeights > 66)
                txtWeightsSum.BackColor = Color.Yellow;
            else 
                txtWeightsSum.BackColor = Color.White;

            double weightedAverage = weightedSum / sumOfWeights;
            txtAverageMicroQuestions.Text = weightedAverage.ToString("#.##");

            double? defaultWeight = db.GetDefaultWeightOfGradeType(idGradeType);
            if (txtMicroGradeWeight.Text == "")
            {
                txtMicroGradeWeight.Text = defaultWeight.ToString();
            }
            defaultWeight = currentGradeType.DefaultWeight;
            txtMacroGradeWeight.Text = defaultWeight.ToString();
        }

        private void trkbWeight_Scroll(object sender, EventArgs e)
        {
            txtMicroGradeWeight.Text = trkbWeight.Value.ToString();
        }

        private void trkbGrade_Scroll(object sender, EventArgs e)
        {
            txtMicroGrade.Text = trkbGrade.Value.ToString();
        }

        int previousQuestionCode = int.MinValue;

        private void btnSaveMicroGrade_Click(object sender, EventArgs e)
        {
            if(currentQuestion == null || currentQuestion.IdQuestion == 0 
                || currentQuestion.IdQuestion == previousQuestionCode)
            {
                if (MessageBox.Show("Non hai scelto la domanda." +
                    "\r\nDevo memorizzare un voto senza domanda registrata (Sì)\r\no non memorizzare (No)?",
                    "Attenzione", MessageBoxButtons.YesNo, MessageBoxIcon.Information,
                    MessageBoxDefaultButton.Button1)
                    == DialogResult.No)
                    return; 
                else
                {
                    currentQuestion = new Question();
                    currentQuestion.IdQuestion = 0; 
                }
            }
            int codParent = 0;
            int.TryParse(txtIdMacroGrade.Text, out codParent);
            if (codParent == 0)
            {
                MessageBox.Show("Prima di assegnare voti parziali, generare un nuovo voto complessivo\n" +
                    "(\"Nuovo voto\")");
                return;  
            }

            int voto, peso;
            int.TryParse(txtMicroGrade.Text, out voto);
            int.TryParse(txtMicroGradeWeight.Text, out peso);

            //if (txtGradeTypeParent.Text != "" && txtGradeTypeParent.Text != "0")
            if (currentQuestion == oldQuestion)
                {
                    if (MessageBox.Show("Devo cambiare la valutazione di questa domanda?",
                    "Attenzione!", MessageBoxButtons.YesNo, MessageBoxIcon.Question,
                    MessageBoxDefaultButton.Button2) == DialogResult.No)
                {
                    // !!!! TODO change the grade if the user answered yes !!!!
                    return; 
                }
            }

            if (voto > 0 && peso >= 0)
            {
                Grade g = new Grade();
                if (currentQuestion == oldQuestion)
                {
                    // old question and grade, we modify existing 
                    g.IdGrade = currentGrade.IdGrade;
                    g.Timestamp = currentGrade.Timestamp;
                }
                else
                {   // new question => set no Id to create a new grade 
                    g.IdGrade = 0; 
                    g.Timestamp = DateTime.Now;
                }
                g.IdQuestion = currentQuestion.IdQuestion;
                g.IdGradeParent = int.Parse(txtIdMacroGrade.Text);
                g.Value = voto;
                g.Weight = peso;
                g.IdSchoolYear = currentYear;
                g.IdQuestion = currentQuestion.IdQuestion;
                g.IdGradeType = idGradeType;
                g.IdStudent = currentStudent.IdStudent;
                g.IdSchoolSubject = currentSchoolSubject.IdSchoolSubject;

                g.IdGrade = db.SaveMicroGrade(g);

                ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);
                oldQuestion = currentQuestion; 
            }
            else
            {
                MessageBox.Show("Scrivere un voto ed un peso"); 
            }
            // remember that this question has already been done 
            if (currentQuestion.IdQuestion != 0)
                Commons.QuestionsAlreadyMadeThisTime.Add(currentQuestion); 
        }

        private void btnNewMacroGrade_Click(object sender, EventArgs e) 
        {
            currentMacroGrade.IdSchoolSubject = currentSchoolSubject.IdSchoolSubject;
            currentMacroGrade.IdSchoolYear = currentYear;

            idQuestionParent = db.CreateMacroGrade(ref currentMacroGrade 
                , currentStudent, idGradeType);
            txtIdMacroGrade.Text = idQuestionParent.ToString();
            txtIdMacroGrade.BackColor = Color.White;
            txtAverageMicroQuestions.Text = "";
            txtWeightsSum.Text = "";
            txtMacroGradeWeight.Text = ""; 
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            int peso = 0;
            int.TryParse(txtMicroGradeWeight.Text, out peso);
            if (peso >= 0 && peso <= 100)
            {
                trkbWeight.Value = peso; 
            }
        }

        private void txtGrade_TextChanged(object sender, EventArgs e)
        {
            float voto = 0;
            float.TryParse(txtMicroGrade.Text, out voto); 
            if (voto >= 10 && voto <= 100)
            {
                trkbGrade.Value = (int) voto;
            }
        }

        private void btnSaveMacroGrade_Click(object sender, EventArgs e)
        {
            double w; 
            double.TryParse(txtWeightsSum.Text, out w);

            if (MessageBox.Show("Assegnazione del voto indicato come nuovo voto complessivo",
                "Attenzione", MessageBoxButtons.YesNo,MessageBoxIcon.Exclamation) 
                == DialogResult.No)
                return;

            if (w == 0)
            {
                MessageBox.Show("Digitare un peso diverso da zero");
                return;
            }
            double a;
            double.TryParse(txtAverageMicroQuestions.Text, out a);
            if (a == 0)
            {
                MessageBox.Show("La media deve essere diversa da zero");
                return;
            }
            if (txtIdMacroGrade.Text != "")
            {
                db.SaveMacroGrade(currentStudent.IdStudent, int.Parse(txtIdMacroGrade.Text),
                    a, w, currentYear, 
                    currentSchoolSubject.IdSchoolSubject);
                txtIdMacroGrade.Text = "";
                ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);
            }
            else
            {
                MessageBox.Show("Questo voticino non ha un voto che lo comprende.\r\tCreare un voto."); 
            }
        }

        private void btnQuestionChoose_Click(object sender, EventArgs e)
        {
            //frmQuestionChoose choice = new frmQuestionChoose(currentSchoolSubject,
            //    currentClass, currentStudent, currentQuestion); // this one passes the subject
            
            // we don't pass the currentSubject because it is better to start from any type of question
            frmQuestionChoose choice = new frmQuestionChoose(null,
                currentClass, currentStudent, currentQuestion);
            choice.ShowDialog();
            currentQuestion = choice.ChosenQuestion;
            if (currentQuestion != null)
            {
                TxtQuestionText.Text = currentQuestion.Text;
                txtMicroGradeWeight.Text = currentQuestion.Weight.ToString();

                // put the question chosen also in the main form
                callingForm.CurrentQuestion = choice.ChosenQuestion; 
            } else
            {
                TxtQuestionText.Text = "";
                txtMicroGradeWeight.Text = ""; 
            }
                txtMicroGrade.Text = "";    
        }

        private void btnNoQuestion_Click(object sender, EventArgs e)
        {
            currentQuestion = null; 
        }

        private void DgwQuestions_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void DgwQuestions_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex > -1)
            //{
            //    DgwQuestions.Rows[e.RowIndex].Selected = true;
            //}
            if (e.RowIndex > -1)
            {
                DgwQuestions.Rows[e.RowIndex].Selected = true;

                DataRow row = ((DataTable)DgwQuestions.DataSource).Rows[e.RowIndex];
                ReadCurrentGradeAndQuestionFromGridRow(row); 
                RefreshTextBoxes();
            }
        }

        private void DgwQuestions_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex > -1)
            //{
            //    DataRow row = ((DataTable)DgwQuestions.DataSource).Rows[e.RowIndex];
            //    ReadCurrentGradeAndQuestionFromGridRow(row);

            //    if ((DataTable)(DgwQuestions.DataSource) != null)
            //    {
            //        DataTable t = (DataTable)(DgwQuestions.DataSource);
            //        if (e.RowIndex < t.Rows.Count)
            //        {
            //            txtMicroGradeWeight.Text = ((double)t.Rows[e.RowIndex]["weight"]).ToString();
            //            txtMicroGrade.Text = ((double)t.Rows[e.RowIndex]["value"]).ToString();
            //            // shows text of the question
            //            Question q = db.GetQuestionById((int)t.Rows[e.RowIndex]["idQuestion"]);

            //        }
            //    }
            //}
        }

        private void ReadCurrentGradeAndQuestionFromGridRow(DataRow row)
        {
            if (currentQuestion == null)
                currentQuestion = new Question();
<<<<<<< HEAD
            currentQuestion.IdQuestion = db.SafeInt(row["IdQuestion"]);
            currentQuestion = db.GetQuestionById(currentQuestion.IdQuestion); 

            if (currentGrade == null)
                currentGrade = new Grade();
            int id = db.SafeInt(row["idGrade"]);
            currentGrade = db.GetGrade(id);
=======
            currentQuestion.IdQuestion = SafeDb.SafeInt(row["IdQuestion"]);
            currentQuestion.IdQuestionType = SafeDb.SafeString(row["IdQuestionType"]);
            currentQuestion.IdSchoolSubject = SafeDb.SafeString(row["IdSchoolSubject"]);
            //currentQuestion.IdSubject = SafeDb.SafeInt(row["IdSubject"]);
            currentQuestion.IdTopic = SafeDb.SafeInt(row["IdTopic"]);
            currentQuestion.Image = SafeDb.SafeString(row["Image"]);
            //currentQuestion.questionImage = SafeDb.SafeString(row["questionImage"]);
            currentQuestion.Text = SafeDb.SafeString(row["Text"]);
            currentQuestion.Weight = SafeDb.SafeDouble(row["Weight"]);
            currentQuestion.Duration = SafeDb.SafeInt(row["Duration"]);
            currentQuestion.Difficulty = SafeDb.SafeInt(row["Difficulty"]);

            if (currentGrade == null)
                currentGrade = new Grade();
            currentGrade.IdGrade = SafeDb.SafeInt(row["idGrade"]);
            currentGrade.IdGradeParent = SafeDb.SafeInt(row["idGradeParent"]);
            currentGrade.IdGradeType = SafeDb.SafeString(row["IdGradeType"]);
            //currentGrade.IdGradeTypeParent = SafeDb.SafeString(row["IdGradeTypeParent"]);
            currentGrade.IdQuestion = SafeDb.SafeInt(row["IdQuestion"]);
            currentGrade.IdSchoolSubject = SafeDb.SafeString(row["IdSchoolSubject"]);
            currentGrade.IdSchoolYear = SafeDb.SafeString(row["IdSchoolYear"]);
            currentGrade.IdStudent = SafeDb.SafeInt(row["IdStudent"]);
            currentGrade.Timestamp = SafeDb.SafeDateTime(row["Timestamp"]);
            currentGrade.Value = SafeDb.SafeDouble(row["Value"]);
            currentGrade.Weight = SafeDb.SafeDouble(row["Weight"]);
>>>>>>> Very large refactory preparing to first distribution. Added management of annotation about single students (unfinished). Using the Nullable types in every database class. Separation of namespaces.
        }

        private void DgwQuestions_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void RefreshTextBoxes()
        {
            TxtQuestionText.Text = currentQuestion.Text;
            txtMicroGradeWeight.Text = currentGrade.Weight.ToString();
            txtMicroGrade.Text = currentGrade.Value.ToString();
            txtGradeType.Text = currentGrade.IdGradeType;
            txtGradeTypeParent.Text = currentGrade.IdGradeTypeParent;
        }

        private void btnEraseMicroGrade_Click(object sender, EventArgs e)
        {
            if (DgwQuestions.SelectedRows.Count == 0)
            {
                MessageBox.Show("Per cancellarla, Selezionare una domanda dalla griglia.");
                return; 
            }
            DataGridViewRow row = (DgwQuestions.SelectedRows[0]);
            db.EraseGrade(SafeDb.SafeInt(row.Cells["idGrade"].Value));
            ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);
        }

        private void btnFlushQuestion_Click(object sender, EventArgs e)
        {
            currentQuestion = null;
            TxtQuestionText.Text = ""; 
        }

        private void frmMicroAssessment_FormClosing(object sender, FormClosingEventArgs e)
        {
            //currentQuestion = 
        }

        private void LessonTimer_Tick(object sender, EventArgs e)
        {
            lblLessonTime.BackColor = ((frmMain)Application.OpenForms[0]).CurrentLessonTimeColor; 
        }

        private void BtnSaveGrade(object sender, EventArgs e)
        {
            if (DgwQuestions.SelectedRows.Count == 0)
            {
                MessageBox.Show("Selezionare una domanda dalla griglia,per poterla salvare.");
                ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);
                return;
            }
            DataRow row = ((DataTable) DgwQuestions.DataSource).Rows[DgwQuestions.SelectedRows[0].Index];
            
            ReadCurrentGradeAndQuestionFromGridRow(row);

            db.SaveMicroGrade(currentGrade);
            ShowStudentDataAndAverages(currentStudent, currentYear, idGradeType);
        }

        private void TxtQuestionText_TextChanged(object sender, EventArgs e)
        {

        }

        private void TxtQuestionText_DoubleClick(object sender, EventArgs e)
        {
            frmQuestion f = new frmQuestion(frmQuestion.QuestionFormType.EditOneQuestion,
                currentQuestion, currentSchoolSubject, currentClass, null);
            f.Show();
        }

        private void txtIdMacroGrade_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
